{"version":3,"file":"static/js/539.1d9fe598.chunk.js","mappings":"2PACA,EAA6B,+BAA7B,EAA+E,qCAA/E,EAA4I,0CAA5I,EAAwM,oCAAxM,EAA4P,kC,SCGtPA,EAAQC,EAAQ,MAqGtB,EAnGmB,WACf,IAAQC,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAASG,KAAKC,MAAMC,aAAaC,QAAQ,YAArE,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAsCC,EAAAA,EAAAA,MAAtC,eAAKC,EAAL,KAAmBC,EAAnB,KACMC,EAAcF,EAAaG,IAAI,UAErCC,EAAAA,EAAAA,YAAU,WACN,GAAKF,EAAL,CACA,IAAIG,EAAkB,IAAIC,gBA2B1B,OAJIJ,GAzBQ,mCA0BRK,GAGG,WACHF,EAAgBG,SA9BR,wCAIZ,4FACgB,mCACC,gCAFjB,kBAKwBtB,EAAMiB,IAAN,UAHP,gCAGO,gCAJR,mCAIQ,kBACoCD,GAAe,CAACO,OAAQJ,EAAgBI,SANpG,aAKUC,EALV,QAQkBC,KAAKC,QAAQC,OAAS,GARxC,uBASQC,MAAM,6YATd,6BAaaT,EAAgBI,OAAOM,QAbpC,kCAc6BL,EAAMC,KAAKC,QAdxC,QAcgBD,EAdhB,OAeYb,EAAUa,GAftB,0DAkBQK,QAAQC,IAAR,MAlBR,2DAJY,yBAgCb,CAAEf,KAELE,EAAAA,EAAAA,YAAU,WACHP,GACFF,aAAauB,QAAQ,SAASzB,KAAK0B,UAAUtB,MAEhD,CAACA,IA2BH,OACI,iCACI,kBAAMuB,UAAYC,EAAeC,SAnBxB,SAAAC,GAGb,GAFAA,EAAEC,iBAEmB,KAAjBjC,EAAMkC,OAAV,CAKA,IACIC,EADW,IAAIC,SAASJ,EAAEK,eACNzB,IAAI,SACvBuB,IACLzB,EAAgB,CAAEV,MAAOmC,IAEzBlC,EAAS,UATLsB,MAAM,mMAeN,WACA,kBAAOe,aAAY,OAAG3B,QAAH,IAAGA,EAAAA,OAAe4B,EACjCV,UAAYC,EACRU,KAAK,OACLC,KAAK,QACTC,SA9BS,SAAAV,GACjB,IAAQW,EAAUX,EAAEK,cAAZM,MAER1C,EAAS0C,IA4BDC,aAAa,MAEbC,YAAY,mBAEhB,mBAAQL,KAAK,SAASX,UAAYC,EAAlC,UACI,iBAAMD,UAAYC,EAAlB,0BAIJ,wBACKxB,GAAUA,EAAOwC,KAAI,SAAA3B,GAAK,OAAI,yBAC3B,SAAC,KAAD,CAAM4B,GAAE,UAAKlD,EAAL,YAAkBsB,EAAM6B,IAChCnB,UAAYC,EADZ,UAC8B,uBAAIX,EAAM8B,oBAFJ9B,EAAM6B","sources":["webpack://goit-react-hw-05-movies/./src/components/MoviesPage/MoviesPage.module.css?564c","components/MoviesPage/MoviesPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"SearchForm\":\"MoviesPage_SearchForm__kpN7l\",\"SearchFormButton\":\"MoviesPage_SearchFormButton__pBDYN\",\"SearchFormButtonLabel\":\"MoviesPage_SearchFormButtonLabel__q049z\",\"SearchFormInput\":\"MoviesPage_SearchFormInput__9qTli\",\"linksOfMovies\":\"MoviesPage_linksOfMovies__BSlkS\"};","import { useState, useEffect } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n// import slugify from 'slugify';\nimport s from './MoviesPage.module.css';\nconst axios = require('axios');\n\nconst MoviesPage = () => {\n    const { pathname } = useLocation();\n    const [query, setQuery] = useState('');\n    const [movies, setMovies] = useState(JSON.parse(localStorage.getItem(\"movies\")));\n    let [searchParams, setSearchParams] = useSearchParams();\n    const searchQuery = searchParams.get('query');\n\n    useEffect(() => {\n        if (!searchQuery) return;\n        let abortController = new AbortController();\n\n        async function fetchMoviesSearch() {\n        const API_KEY = '61d280fbc4e0ab3fee827783c53f7600';\n        const BASE_URL = 'https://api.themoviedb.org/3/';\n\n            try {\n            const movie = await axios.get(\n                `${BASE_URL}search/movie?api_key=${API_KEY}&query=${searchQuery}`, {signal: abortController.signal,});\n                \n                if (movie.data.results.length < 1) {\n                alert('Пожалуйста введите корректное название или возможно такой фильм не найден');\n                return;\n                }\n\n                if (!abortController.signal.aborted) {\n                    let data = await movie.data.results;\n                    setMovies(data);\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        if (searchQuery) {\n            fetchMoviesSearch();\n        }\n\n        return () => {\n            abortController.abort();\n        };\n    }, [ searchQuery ]);\n\n    useEffect(() => {\n        if(movies) {\n         localStorage.setItem(\"movies\",JSON.stringify(movies));  \n        }\n    },[movies])\n\n    // const makeSlug = string => slugify(string,{ replacement:'=', lower: true });\n\n    const handleChange = e => {\n        const { value } = e.currentTarget;\n\n        setQuery(value);\n    }\n\n    const onSubmit = e => { \n        e.preventDefault();\n\n        if (query.trim() === '') {\n            alert('Пожалуйста введите поисковое слово.');\n            return;\n        }\n\n        let formData = new FormData(e.currentTarget);\n        let newQuery = formData.get(\"query\");\n        if (!newQuery) return;\n        setSearchParams({ query: newQuery });\n\n        setQuery('');\n    }\n\n\n    return(\n        <>\n            <form className={ s.SearchForm } onSubmit={ onSubmit }>\n            <input defaultValue={ searchQuery ?? undefined }\n                className={ s.SearchFormInput }\n                    type=\"text\"\n                    name=\"query\"\n                onChange={ handleChange }\n                autoComplete=\"off\"\n                // autoFocus\n                placeholder=\"Search movies\"\n            />\n            <button type=\"submit\" className={ s.SearchFormButton }>\n                <span className={ s.SearchFormButtonLabel }>Search</span>\n            </button>\n            </form>\n\n            <ul>\n                {movies && movies.map(movie => <li key={movie.id}>\n                    <Link to={`${pathname}/${ movie.id }`} \n                    className={ s.linksOfMovies }><b>{movie.original_title}</b></Link></li>)\n                }\n            </ul>\n        </>\n    )\n\n}\nexport default MoviesPage;"],"names":["axios","require","pathname","useLocation","useState","query","setQuery","JSON","parse","localStorage","getItem","movies","setMovies","useSearchParams","searchParams","setSearchParams","searchQuery","get","useEffect","abortController","AbortController","fetchMoviesSearch","abort","signal","movie","data","results","length","alert","aborted","console","log","setItem","stringify","className","s","onSubmit","e","preventDefault","trim","newQuery","FormData","currentTarget","defaultValue","undefined","type","name","onChange","value","autoComplete","placeholder","map","to","id","original_title"],"sourceRoot":""}